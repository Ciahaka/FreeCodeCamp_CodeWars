/**
 * Сравните области видимости ключевых слов var и let
 */
//Если вы не знакомы с понятием let, ознакомьтесь с этой задачей о разнице между let и var.
//
// Когда вы объявляете переменную с помощью ключевого слова var, она объявляется глобально или локально, если объявляется внутри функции.
//
// Ключевое слово let ведет себя аналогично, но с некоторыми дополнительными возможностями. Когда вы объявляете переменную с помощью ключевого слова let внутри блока, оператора или выражения, ее область действия ограничена этим блоком, оператором или выражением.
//
// Например:
var numArray = [];
for (var i = 0; i < 3; i++) {
    numArray.push(i);
}
// console.log(numArray);
// console.log(i);
//Здесь консоль отобразит значения [0, 1, 2] и 3.
//
// С помощью ключевого слова var переменная i объявляется глобально. Поэтому при выполнении i++ происходит обновление глобальной переменной. Этот код похож на следующий:
var numArray_1 = [];
var j;
for (j = 0; j < 3; j++) {
    numArray_1.push(j);
}
console.log(numArray_1);
console.log(j);
//Здесь консоль отобразит значения [0, 1, 2] и 3.

//Такое поведение вызовет проблемы, если вы создадите функцию и сохраните ее для последующего использования внутри цикла for, в котором используется переменная i. Это связано с тем, что сохраненная функция всегда будет ссылаться на значение обновленной глобальной переменной i.
var printNumTwo;
for (var d = 0; d < 3; d++) {
    if (d === 2) {
        printNumTwo = function() {
            return d;
        };
    }
}
console.log(printNumTwo());
//Здесь консоль отобразит значение 3.
//
// Как видите, printNumTwo() выводит 3, а не 2. Это происходит потому, что значение, присвоенное i, было обновлено, и функция printNumTwo() возвращает глобальное значение i, а не то, которое было у i на момент создания функции в цикле for. Ключевое слово let не следует такому поведению:
let printNumTwo_1;
for (let t = 0; t < 3; t++) {
    if (t === 2) {
        printNumTwo_1 = function() {
            return t;
        };
    }
}
console.log(printNumTwo_1() + '------');
// console.log(t);

//Здесь консоль отобразит значение 2 и ошибку о том, что i не определено.
//
// i не определена, потому что она не была объявлена в глобальной области видимости. Она объявлена только в операторе цикла for. printNumTwo() возвращает правильное значение, потому что три разные переменные i с уникальными значениями (0, 1 и 2) были созданы ключевым словом let в операторе цикла.

//Задача: Исправьте код так, чтобы i, объявленная в операторе if, была отдельной переменной, а не i, объявленной в первой строке функции. Убедитесь, что ключевое слово var не используется нигде в коде.
//
// Это упражнение призвано проиллюстрировать разницу между тем, как ключевые слова var и let назначают область видимости объявленной переменной. При программировании функции, подобной той, что использовалась в этом упражнении, часто лучше использовать разные имена переменных, чтобы избежать путаницы.

const checkScope = () => {
    let i = 'function scope';
    if (true) {
        let i = 'block scope';
        console.log('Block scope i is: ', i);
    }
    console.log('Function scope i is: ', i);
    return i;
}
console.log(checkScope())