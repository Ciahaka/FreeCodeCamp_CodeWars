/**
 * Использование рекурсии для создания обратного отсчета
 */

//В предыдущей задаче вы узнали, как использовать рекурсию для замены цикла for. Теперь давайте рассмотрим более сложную функцию, которая возвращает массив последовательных целых чисел, начиная с 1 и заканчивая числом, переданным в функцию.
//
// Как уже упоминалось в предыдущей задаче, будет базовый случай. Базовый случай сообщает рекурсивной функции, когда ей больше не нужно вызывать саму себя. Это простой случай, когда возвращаемое значение уже известно. Также будет рекурсивный вызов, который выполняет исходную функцию с разными аргументами. Если функция написана правильно, то в конечном итоге будет достигнут базовый случай.
//
// Например, допустим, вы хотите написать рекурсивную функцию, которая возвращает массив, содержащий числа от 1 до n. Эта функция должна принять аргумент n, представляющий конечное число. Затем она должна будет вызывать себя с постепенно уменьшающимися значениями n, пока не достигнет 1. Вы можете написать функцию следующим образом:
function countup(n) {
    if (n < 1) {
        return [];
    } else {
        const countArray = countup(n - 1);
        countArray.push(n);
        return countArray;
    }
}

console.log(countup(5));
//На консоли будет отображаться значение [1, 2, 3, 4, 5].
//
// Сначала это кажется нелогичным, поскольку значение n уменьшается, но значения в конечном массиве увеличиваются. Это происходит потому, что выталкивание происходит последним, после возврата рекурсивного вызова. В момент, когда n заталкивается в массив, countup(n - 1) уже был оценен и вернул [1, 2, ..., n - 1].

//Задача: Мы определили функцию countdown с одним параметром (n). Функция должна использовать рекурсию для возврата массива, содержащего целые числа от n до 1 в зависимости от параметра n. Если функция вызывается с числом меньше 1, она должна возвращать пустой массив. Например, вызов этой функции с n = 5 должен вернуть массив [5, 4, 3, 2, 1]. Ваша функция должна использовать рекурсию, вызывая саму себя, и не должна использовать циклы любого вида.

const countdown = (n) => {
    if (n < 1) {
        return []
    }
  const arr = countdown(n-1)
    arr.unshift(n)
    return arr
}
console.log(countdown(5))

//or
function countdown_1(n){
    return n < 1 ? [] : [n, ...countdown_1(n - 1)];
}

console.log(countdown(10))