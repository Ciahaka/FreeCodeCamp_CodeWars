/**
 Использование нескольких условных (тернарных) операторов
 */
//В предыдущей задаче вы использовали один условный оператор. Вы также можете объединить их в цепочку для проверки нескольких условий.
// Следующая функция использует операторы if, else if и else для проверки нескольких условий:
function findGreaterOrEqual(a, b) {
  if (a === b) {
    return "a и b равны";
  }
  else if (a > b) {
     return "a больше";
  }
  else {
     return "b больше";
  }
}
// Приведенная выше функция может быть переписана с использованием нескольких условных операторов:

function findGreaterOrEqual_1(a, b) {
  return (a === b) ? "a и b равны"
    : (a > b) ? "a больше"
    : "b больше";
}
// Лучшей практикой считается форматирование нескольких условных операторов таким образом, чтобы каждое условие располагалось на отдельной строке, как показано выше. Использование нескольких условных операторов без надлежащего отступа может сделать ваш код трудночитаемым. Например:
//
function findGreaterOrEqual_2(a, b) {
  return (a === b) ? "a и b равны" : (a > b) ? "a больше" : "b больше";
}
// В функции checkSign используйте несколько условных операторов - в соответствии с рекомендуемым форматом, используемым в findGreaterOrEqual, - чтобы проверить, является ли число положительным, отрицательным или нулевым. Функция должна возвращать positive, negative или zero значение.
const checkSign = (num) => num < 0 ?'negative': num > 0 ? 'positive': 'zero'

console.log(checkSign(0))
;